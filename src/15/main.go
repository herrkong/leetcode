
// 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，
// 使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。

//nums = [-1,0,1,2,-1,-4]

//[[-1,-1,2],[-1,0,1]]

package main

import (
	"log"
)

// 用 map 提前计算好任意 2 个数字之和，保存起来，可以将时间复杂度降到 O(n^2)。这一题比较麻烦的一点在于，最后输出解的时候，要求输出不重复的解。
// 数组中同一个数字可能出现多次，同一个数字也可能使用多次，但是最后输出解的时候，不能重复。例如 [-1，-1，2] 和 [2, -1, -1]、[-1, 2, -1] 这 3 个解是重复的，
// 即使 -1 可能出现 100 次，每次使用的 -1 的数组下标都是不同的。

// 这里就需要去重和排序了。map 记录每个数字出现的次数，然后对 map 的 key 数组进行排序，最后在这个排序以后的数组里面扫，找到另外 2 个数字能和自己组成 0 的组合。

func getthresum(sl []int ) (res [][]int){



	return res
}


func main() {

	nums := []int{-1,0,1,2,-1,-4}

	res := getthresum(nums)

	log.Println(res)
	
}